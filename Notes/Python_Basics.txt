List []
Dictionary {}

YAML vs JSON - JSON is good for computer to computer communication. Payload for API's , when humans are not involved (Web application/eAPI/NXAPI). Not that good for human beings to write to son. YAML is
               easy for humans (eg. Ansible)

1.1   - Strings and String Formatting
1.2   - Numbers, Files, Lists, Tuples
1.3   - Conditionals, For loop, While loop
1.3.4 - Enumerate is a good way to keep track of list and the list index value.
1.4   - Dictionaries (key-value pair), Sets, Exceptions, Regex
1.4.3 - Sets { a, b, c} , set a | set b or seta.union(setb) —> union of set a and b, set a & set b  or seta.intersection(setb)—> Intersection of set a and set b
            set a - set b —> difference in set a and set b, set a ^ set b —> Give me unique values from both the sets
1.4.4 - import re
            ip_addr = 12.10.13.14
            re.search(r”…..”,ip.addr).group(0) ——> regular expression search , raw search for period meaning any character in ip_addr and group(0) will print it
            re.search(r”.+”,ip.addr).group(0) ——> regular expression search , any character match + indicates any character match 1 or more times
            re.search(r”.*”,ip.addr).group(0) ——> regular expression search , any character match * indicates any character match 0 or more times
            ^ says it has to be in the beginning of the line, $ says it has to be at the end of the line
            \d will look for digit and print it, \d\d\d will look for three digits consecutively if it does not find it’ll fail
            eg. 10.220.100.1 —> ^+\d will give us 10, \d+$ will give us 1
            \s match white space
            \S Everything not in whitespace character class.
            Important You can define your character class inside square brackets [\d\.]+ —> It looks for digits and any characters (As per .) and becomes greedy due to + 
            If you want to save any character put the regex into () and it’ll be saved under group(1) , entire string will be saved under group(0)
            If you want to save this character with a name the format is (?P<serial_num>\S+)
            If you do ().groupdict() instead then it will print all the variables as key value pair
            .*? —> dot star question mark makes it non greedy
            re.search(r”^Processor board ID (.*)$”, output, flag=re.M) —> Python Regex has this flag module which if set too re.M will go through each line in output and match the regex
            Another flag is re.DOTALL (The default behavior of .* is togo through characters until just end of line. By using the flag re.DOTALL it goes till the end)
            re.I flag ignores capitalization in your regex
            We can also use re.split() and re.sub() with regex
1.5.2 - In a function, def print_ip(ip_addr, username = 'admin', password = 'cisco123'):
        my_list = ['10.1.1.1', 'admin', 'admin123']
        my_dict = { key1 : value1, key2 : value 2, key3 : value3 }
        print_ip(*my_list) ---> * indicates pass my_list list as a sequence of values rather than putting everything in the first value that is ip_addr
        print_ip(**my_dict) ---> ** indicates pass my_dict dictionary as a sequence of values corresponding to keys rather than putting everything in the first value that is ip_addr

1.5.3 - Classes : Let you pass shared information. eg. going into config t/show command/ stopping auto paging etc. all this functions require ssh connection. So in classes you have shared information the
        ssh connection and the functions which are called method. 2nd thing classes give you is the way to build hierarchy (Child and Parent class , which makes it better to share code)
        Syntax - class MyClass(object):
                     def __init__(self): ---> (method syntax is same as function and this will help initialize the object)
      - You can write a python function as def ()
      - Then you can import that function in another program using --> import my_func and then my_func.print_ip('1.1.1.1')

1.6   - Paramiko : Python SSH library for server to server ssh connections. Netmiko is for networks based on Paramiko.
        Download NTC templates from internet to use text fsm 

1.6.6 - Process to add logging to netmiko which can be used for troubleshooting :

        import logging
        logging.basicConfig(filename='test.log', level=logging.DEBUG)
        logger = logging.getLogger("netmiko")

2.1   - Netmiko Connection Program:
        from netmiko import ConnectHandler
        from getpass import getpass

        password = getpass() --> Only get password from user one time as the password and secret are the same

        nxos1 = {
              "host": "nxos1.lasthop.io",
              "username": "pyclass",
              "password": getpass(),
              "secret:  : getpass(),
              "device_type": "cisco_nxos",  --> If device type is invalid, once you run the script you'll get a list of all netlike valid device types
        }

        net_connect = ConnectHandler(**nxos1)
        net_connect = Netmiko(**nxos1)
        net_conn.send_command_timing("disable")
        print(net_connect.find_prompt())

        net_conn.enable()
        print(net_connect.find_prompt())

        output = net_conn.send_command("show arp") --> show command output from the device
        print(net_conn.find_prompt())

        net_connect.disconnect()

2.4.7 - TextFSM --> Finite State Machine, uses Regex to parse data and Record operation to record the output in list/dictionary format.
