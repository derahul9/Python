Functional:
- Basic requirements of the system

Non-Functional:
- Scalability
- Reliability
- Availability
- Efficiency
- Manageability

Scalability:
Scalability is the capability of a system, process, or a network to grow and manage increased demand. Any distributed system that can continuously evolve in order to support the growing
amount of work is considered to be scalable. A system may have to scale because of many reasons like increased data volume or increased amount of work, e.g., number of transactions. A scalable
system would like to achieve this scaling without performance loss.

Horizontal vs. Vertical Scaling: Horizontal scaling means that you scale by adding more servers into your pool of resources whereas Vertical scaling means that you scale by adding more power
(CPU, RAM, Storage, etc.) to an existing server. With horizontal-scaling it is often easier to scale dynamically by adding more machines into the existing pool; Vertical-scaling is usually
limited to the capacity of a single server and scaling beyond that capacity often involves downtime and comes with an upper limit.

Reliability:
By definition, reliability is the probability a system will fail in a given period. In simple terms, a distributed system is considered reliable if it keeps delivering its services even when
one or several of its software or hardware components fail. Reliability represents one of the main characteristics of any distributed system, since in such systems any failing machine can
always be replaced by another healthy one, ensuring the completion of the requested task. Obviously, redundancy has a cost and a reliable system has to pay that to achieve such resilience
for services by eliminating every single point of failure.

Availability:
By definition, availability is the time a system remains operational to perform its required function in a specific period. If a system is reliable, it is available. However, if it is
available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve a high availability even with an unreliable
product by minimizing repair time and ensuring that spares are always available when they are needed.

Efficiency:
The complexity of operations supported by distributed data structures (e.g., searching for a specific key in a distributed index) can be characterized as a function of one of these cost
units. Generally speaking, the analysis of a distributed structure in terms of ‘number of messages’ is over-simplistic. It ignores the impact of many aspects, including the network topology,
the network load, and its variation, the possible heterogeneity of the software and hardware components involved in data processing and routing, etc. However, it is quite difficult to
develop a precise cost model that would accurately take into account all these performance factors; therefore, we have to live with rough but robust estimates of the system behavior.

Serviceability or Manageability:
Another important consideration while designing a distributed system is how easy it is to operate and maintain. Serviceability or manageability is the simplicity and speed with which a
system can be repaired or maintained; if the time to fix a failed system increases, then availability will decrease. Things to consider for manageability are the ease of diagnosing and
understanding problems when they occur, ease of making updates or modifications, and how simple the system is to operate. Early detection of faults can decrease or avoid system downtime.
For example, some enterprise systems can automatically call a service center (without human intervention) when the system experiences a system fault.